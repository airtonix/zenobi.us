version: 2

jobs:
  build_image:
    working_directory: /build
    docker:
      - image: node:alpine
    steps:
      - checkout

      - run:
          name: install docker-compose
          command: |
            apk add --update --no-cache \
              py2-pip=9.0.1-r1 \
              docker \
              jq

            pip install \
              docker-compose==1.12.0

      - setup_remote_docker

      - run:
          name: docker login
          command: |
            docker login --username=${DOCKER_USERNAME} --password=${DOCKER_PASSWORD}

      - restore_cache:
          keys:
            - image-{{ .Branch }}
          paths:
            - /caches/docker-image.tar

      - run:
          name: Load Docker image layer cache
          command: |
              set +o pipefail
              docker load -i /caches/docker-image.tar | true

      - run:
          name: Build application Docker image
          when: on_success
          command: |
              GIT_HASH=$(git describe --tags)

              docker build \
                --cache-from=app \
                --label="project.git.described=${GIT_HASH}" \
                --label="project.git.commit=${CIRCLE_SHA1}" \
                --label="project.ci.workflow=${CIRCLE_WORKFLOW_ID}" \
                --label="project.ci.job=${CIRCLE_JOB}" \
                --label="project.ci.buildNo=${CIRCLE_BUILD_NUM}" \
                --label="project.ci.buildurl=${CIRCLE_BUILD_URL}" \
                --label="project.ci.prs=${CIRCLE_PULL_REQUESTS}" \
                -t app .

              echo "Docker image size $(docker image inspect app --format='{{.Size}}')"

      - run:
          name: Test docker image
          when: on_success
          command: |
            # tag the image as expected by the docker-compose.yml (which uses package.json version field)
            docker tag app ${DOCKER_USERNAME}/zenobius:$(cat ./package.json | jq -r '.version')
            npm run generate

      - run:
          name: Deploy docker image
          when: on_success
          command: |
              DOCKER_IMAGE_NAME=${DOCKER_USERNAME}/zenobius
              TAG=${CIRCLE_TAG:-$(echo $GIT_HASH | sed 's/[\.v]//g')}
              echo "tagging image as ${DOCKER_IMAGE_NAME}:${TAG}"
              docker tag app ${DOCKER_IMAGE_NAME}:${TAG}

              echo "tagging image as ${DOCKER_IMAGE_NAME}:latest"
              docker tag app ${DOCKER_IMAGE_NAME}:latest

              docker push ${DOCKER_IMAGE_NAME}:${TAG}
              docker push ${DOCKER_IMAGE_NAME}:latest

      - run:
          name: Save Docker image layer cache
          when: on_success
          command: |
              mkdir -p /caches
              docker save -o ./docker-image.tar ${DOCKER_USERNAME}/zenobius:latest
              cp docker-image.tar /caches/

      - save_cache:
          when: on_success
          key: image-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - /caches/docker-image.tar
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory.
          # This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: .
          paths:
            - docs/**/*

  build_website:
    working_directory: /build
    docker:
      - image: node:alpine
    steps:

      - checkout

      - run:
          name: install docker-compose
          command: |
            apk add --update --no-cache \
              py2-pip=9.0.1-r1 \
              docker \
              jq

            pip install \
              docker-compose==1.12.0

      - setup_remote_docker

      - run:
          name: docker login
          command: |
            docker login --username=${DOCKER_USERNAME} --password=${DOCKER_PASSWORD}

      - run:
          name: Build website
          command: |
              npm run generate

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory.
          # This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: .
          paths:
            - docs/**/*

  deploy_website:
    working_directory: /build
    docker:
      - image: node:alpine
    steps:
      - checkout
      - setup_remote_docker
      - run: echo true

  test_website:
    working_directory: /build
    docker:
      - image: node:alpine
    steps:
      - checkout
      - setup_remote_docker
      - run: echo true

workflows:
  version: 2
  # only builds new docker images
  # - for tagged commites on
  # - branches starting with 'docker'.
  build-docker-image:
    jobs:
      - build_image:
          filters:
            tags: { only: /.*/ }
            branches: { only: /^docker/ }
      - test_image:
          filters:
            tags: { only: /.*/ }
            branches: { only: /^docker/ }

  build-deploy-website:
    jobs:
      # builds website on:
      # - any branch (expcept those starting with docker)
      # - any tag
      - build_website:
          filters:
            tags: { only: /.*/ }
            branches: { ignore: /^docker/ }
      # runs tests on:
      # - any branch
      # - any tag
      - test_website:
          requires:
            - build_website
          filters:
            tags: { only: /.*/ }
            branches: { ignore: /^docker/ }
      # deploys website only
      # - for v tagged commits
      # - on the master branch
      - deploy_website:
          requires:
            - test_website
          filters:
            tags: { only: /^v.*/ }
            branches: { only: /master/ }
