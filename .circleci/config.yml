version: 2

defaults: &defaults
  docker-image: &defaults__docker
    working_directory: /build
    docker:
      - image: node:alpine
    steps:
      - &defaults__docker_provision
        run:
          name: install docker-compose
          command: |
            apk add --update --no-cache \
              py2-pip=9.0.1-r1 \
              docker \
              git \
              jq
            pip install \
              docker-compose==1.12.0

      - &defaults__docker_login
        run:
          name: docker login
          command: |
            docker login --username=${DOCKER_USERNAME} --password=${DOCKER_PASSWORD}

jobs:

  image_build:
    <<: *defaults__docker
    steps:
      - *defaults__docker_provision
      - setup_remote_docker
      - checkout
      - run:
          name: deploy hashed image
          command: |
            DOCKER_IMAGE_NAME=${DOCKER_USERNAME}/zenobius
            DOCKER_IMAGE_NAME_HASHED=${DOCKER_IMAGE_NAME}:${CIRCLE_SHA1}
            PROJECT_VERSION=$(cat ./package.json | jq -r '.version')

            docker login --username=${DOCKER_USERNAME} --password=${DOCKER_PASSWORD}
            docker pull ${DOCKER_IMAGE_NAME}
            docker build \
              --cache-from=$DOCKER_IMAGE_NAME_HASHED \
              --label="project.pkg.version=${PROJECT_VERSION}" \
              --label="project.git.described=$(git describe --tags)" \
              --label="project.git.commit=${CIRCLE_SHA1}" \
              --label="project.ci.workflow=${CIRCLE_WORKFLOW_ID}" \
              --label="project.ci.job=${CIRCLE_JOB}" \
              --label="project.ci.buildNo=${CIRCLE_BUILD_NUM}" \
              --label="project.ci.buildurl=${CIRCLE_BUILD_URL}" \
              --label="project.ci.prs=${CIRCLE_PULL_REQUESTS}" \
              --tag ${DOCKER_IMAGE_NAME_HASHED} .

            echo "Docker image size $(docker image inspect ${DOCKER_IMAGE_NAME_HASHED} --format='{{.Size}}')"

            echo "docker.save.image > ${DOCKER_IMAGE_NAME_HASHED}"
            docker save ${DOCKER_IMAGE_NAME_HASHED} > /tmp/workspace/save/image.tar
            echo "docker.push.image > ${DOCKER_IMAGE_NAME_HASHED}"
            docker push ${DOCKER_IMAGE_NAME_HASHED}

            echo ${DOCKER_IMAGE_NAME} > /tmp/workspace/save/name
            echo ${DOCKER_IMAGE_NAME_HASHED} > /tmp/workspace/save/hash
            echo ${PROJECT_VERSION} > /tmp/workspace/project/version

      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - save/image.tar
            - save/name
            - save/hash
            - project/version

  image_test:
    <<: *defaults__docker
    steps:
      - *defaults__docker_provision
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Test docker image
          when: on_success
          command: |
            DOCKER_IMAGE_NAME=$(cat /tmp/workspace/save/name)
            DOCKER_IMAGE_NAME_HASHED=$(cat /tmp/workspace/save/hash)
            PROJECT_VERSION=$(cat /tmp/workspace/project/version)

            docker load < /tmp/workspace/save/image.tar
            echo "docker.tag.image > ${DOCKER_IMAGE_NAME}:${PROJECT_VERSION}"
            docker tag ${DOCKER_IMAGE_NAME_HASHED} ${DOCKER_IMAGE_NAME}:${PROJECT_VERSION}
            npm run ci:generate

  image_push:
    <<: *defaults__docker
    steps:
      - *defaults__docker_provision
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Deploy docker image
          when: on_success
          command: |
            DOCKER_IMAGE_NAME=$(cat /tmp/workspace/save/name)
            DOCKER_IMAGE_NAME_HASHED=$(cat /tmp/workspace/save/hash)
            PROJECT_VERSION=$(cat /tmp/workspace/project/version)

            echo "docker.load.image"
            docker load < /tmp/workspace/save/image.tar

            echo "docker.tag.image > ${DOCKER_IMAGE_NAME}:${PROJECT_VERSION}"
            docker tag ${DOCKER_IMAGE_NAME_HASHED} ${DOCKER_IMAGE_NAME}:${PROJECT_VERSION}
            echo "docker.push.image > ${DOCKER_IMAGE_NAME}:${PROJECT_VERSION}"
            docker push ${DOCKER_IMAGE_NAME}:${PROJECT_VERSION}

            echo "docker.tag.image > ${DOCKER_IMAGE_NAME}:latest"
            docker tag ${DOCKER_IMAGE_NAME}:${CIRCLE_SHA1} ${DOCKER_IMAGE_NAME}:latest
            echo "docker.push.image > ${DOCKER_IMAGE_NAME}:latest"
            docker push ${DOCKER_IMAGE_NAME}:latest

  # deploy_build:
  #   <<: *defaults__docker
  #   steps:
  #     - *defaults__docker_provision
  #     - setup_remote_docker
  #     - checkout
  #     - *defaults__docker_login
  #     - run:
  #         name: Build website
  #         command: |
  #             npm run generate
  #     - persist_to_workspace:
  #         # Must be an absolute path, or relative path from working_directory.
  #         # This is a directory on the container which is
  #         # taken to be the root directory of the workspace.
  #         root: .
  #         paths:
  #           - docs/**/*

  # deploy_test:
  #   <<: *defaults__docker
  #   steps:
  #     - checkout
  #     - setup_remote_docker
  #     - run: echo true

  # deploy_push:
  #   <<: *defaults__docker
  #   steps:
  #     - checkout
  #     - setup_remote_docker
  #     - run: echo true


workflows:
  version: 2

  # only builds new docker images
  # - for tagged commites on
  # - branches starting with 'docker'.
  image:
    jobs:
      - image_build:
          filters:
            tags: { only: /.*/ }
            branches: { only: /^docker/ }
      - image_test:
          requires:
            - image_build
          filters:
            tags: { only: /.*/ }
            branches: { only: /^docker/ }
      - image_push:
          requires:
            - image_test
          filters:
            tags: { only: /.*/ }
            branches: { only: /^docker/ }


  # deploy:
  #   jobs:

  #     # builds website on:
  #     # - any branch (expcept those starting with docker)
  #     # - any tag
  #     - deploy_build:
  #         filters:
  #           tags: { only: /.*/ }
  #           branches: { ignore: /^docker/ }

  #     # runs tests on:
  #     # - any branch
  #     # - any tag
  #     - test_website:
  #         requires:
  #           - build_website
  #         filters:
  #           tags: { only: /.*/ }
  #           branches: { ignore: /^docker/ }

  #     # deploys website only
  #     # - for v tagged commits
  #     # - on the master branch
  #     - deploy_website:
  #         requires:
  #           - test_website
  #         filters:
  #           tags: { only: /^v.*/ }
  #           branches: { only: /master/ }
