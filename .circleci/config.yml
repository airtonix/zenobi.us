version: 2

jobs:
  build_image:
    working_directory: /build
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout

      - setup_remote_docker

      - restore_cache:
          keys:
            - image-{{ .Branch }}
          paths:
            - /caches/docker-image.tar

      - run:
          name: Load Docker image layer cache
          command: |
              set +o pipefail
              docker load -i /caches/docker-image.tar | true

      - run:
          name: Build application Docker image
          when: on_success
          command: |
              docker login --username=${DOCKER_USERNAME} --password=${DOCKER_PASSWORD}

              DOCKER_IMAGE_NAME=${DOCKER_USERNAME}/zenobius
              GIT_HASH=`git describe --tags`
              TAG=${CIRCLE_TAG:-$(GIT_HASH | sed 's/[\.v]//g')}

              docker build \
                --cache-from=app \
                --label="project.git.described=${GIT_HASH}" \
                --label="project.git.commit=${CIRCLE_SHA1}" \
                --label="project.ci.workflow=${CIRCLE_WORKFLOW_ID}" \
                --label="project.ci.job=${CIRCLE_JOB}" \
                --label="project.ci.buildNo=${CIRCLE_BUILD_NUM}" \
                --label="project.ci.buildurl=${CIRCLE_BUILD_URL}" \
                --label="project.ci.prs=${CIRCLE_PULL_REQUESTS}" \
                -t ${DOCKER_IMAGE_NAME}:${TAG} .

              echo "built image as ${DOCKER_IMAGE_NAME}:${TAG}"
              echo "Docker image size $(docker image inspect ${DOCKER_IMAGE_NAME}:${TAG} --format='{{.Size}}')"

              echo "tagging image as ${DOCKER_IMAGE_NAME}:latest"
              docker tag ${DOCKER_IMAGE_NAME}:${TAG} ${DOCKER_IMAGE_NAME}:latest

              docker push ${DOCKER_IMAGE_NAME}:${TAG}
              docker push ${DOCKER_IMAGE_NAME}:latest

      - run:
          name: Save Docker image layer cache
          when: on_success
          command: |
              mkdir -p /caches
              docker save -o ./docker-image.tar ${DOCKER_USERNAME}/zenobius:latest
              cp docker-image.tar /caches/

      - save_cache:
          when: on_success
          key: image-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - /caches/docker-image.tar

  build_website:
    working_directory: /build
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - run:
          name: install docker-compose
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0

      - setup_remote_docker

      - run:
          name: install nodejs
          command: |
            wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash
            export NVM_DIR=$HOME/.nvm
            source $NVM_DIR/nvm.sh
            nvm install 8.9 && nvm alias default 8.9
            echo 'export NVM_DIR=$HOME/.nvm' >> $BASH_ENV
            echo 'source $NVM_DIR/nvm.sh' >> $BASH_ENV

      - run:
          name: docker login
          command: |
            docker login --username=${DOCKER_USERNAME} --password=${DOCKER_PASSWORD}

      - run:
          name: Build website
          command: |
              npm run generate

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory.
          # This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: .
          paths:
            - docs/**/*

  deploy_website:
    working_directory: /build
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run: echo true

  test_website:
    working_directory: /build
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run: echo true

workflows:
  version: 2
  # only builds new docker images
  # for tagged commites on
  # branches starting with 'docker'.
  build-docker-image:
    jobs:
      - build_image:
          filters:
            tags: { only: /.*/ }
            branches: { only: /^docker/ }

  build-deploy-website:
    jobs:
      # builds website on any branch or tag
      - build_website:
          filters:
            tags: { only: /.*/ }
      # runs tests on any branch or tag
      - test_website:
          requires:
            - build_website
          filters:
            tags: { only: /.*/ }
            branches: { ignore: /^docker/ }
      # deploys website only
      # for v tagged commits
      # on the master branch
      - deploy_website:
          requires:
            - test_website
          filters:
            tags: { only: /^v.*/ }
            branches: { only: /master/ }
