{
  "title": "Automation, what I've learnt this year.",
  "stage": "draft",
  "tags": "nodejs, webpack, browserify, es6, selenium, vuejs",
  "icon": "info_outline",
  "meta": {
    "index": 1,
    "fileName": "2016-01-01-automation-what-i-have-learnt.md",
    "section": "/",
    "dirName": "/posts"
  },
  "date": "2016-01-01",
  "path": "/posts/posts/automation-what-i-have-learnt",
  "permalink": "/posts/automation-what-i-have-learnt",
  "anchors": [],
  "body": "<p>This year (and the next) mark the time in my growth where I become more pragmatic in my world view. Evolution and survival of the most pragmatic.</p>\n<p>There is more focus on creating systems for people.</p>\n<h2>Automation</h2>\n<p>I really dislike checklists… a lot.</p>\n<p>So if I can turn a checklist into code, I will. Now I have more time to work with the team to overcome feature obstacles.</p>\n<p>Checklists as code are:</p>\n<ul>\n<li>git hooks</li>\n<li>linters</li>\n<li>e2e tests</li>\n<li>tools that generate things</li>\n<li>deployment code</li>\n</ul>\n<h3>Somethings can’t be autometed (yet)</h3>\n<p>I’ve discovered some checklists are too expensive as code.</p>\n<p><strong>visual regression testing</strong></p>\n<p>Here we found that a tool like wraith to publish incremental snapshots over the life of a project is great for quickly highlight changes. A designer or developer can then make the call if the change is acceptable.</p>\n<p><strong>Unused Code</strong></p>\n<p>Often styles and javascript are created for components that may only come to life when a CMS user enables a setting or adds certain types of content to the page.</p>\n<p>In this case we’ve found that a simple component library gives quick indication about what css/js relates to what html mark-up.</p>\n<p>Ideally a developer should not leave dead code in the project.</p>\n<h2>Webpack</h2>\n<ul>\n<li>webpack. the hero we need not the one we deserve.</li>\n<li>speed differences with <code>gulp + browserify</code> vs <code>webpack dev server</code> are day and night. Gulp is 20secs everytimg, webpack has an initial time cost, but each change thereafter is relfective of affected code.</li>\n<li>instead of <code>scriptjs</code> loading cdn libs, use <code>system.import(/* webpackChunkName: 'vendor/jquery' */ @vendor/jquery')</code>\n<ul>\n<li>cdn might change over next 3years. Most commerical projects are legacy the moment they are deployed. No one likes working on them, so don’t make them fragile.</li>\n<li>assets can now easily be fingerprinted. yay <code>[chunkhash]</code>.</li>\n<li>the magic comment means it’s also lazy loaded.</li>\n</ul>\n</li>\n</ul>\n<h2>Gulp</h2>\n<ul>\n<li>Gulp is one of those things. It starts out small, quickly turns into a train wreck and your holding all the pieces.</li>\n<li>Most seek to create a black box of tasks, reality is they end up with a mountain of unmaintainable code sparse of desired features… because streams.</li>\n<li>For someone who spends their time looking at directory trees and file managers, It’s a mental model that makes sense to the mind incrementally chipping away at a problem.</li>\n<li>Errors are swallowed.</li>\n<li>Most people don’t even know how it really works, therefore most of the <code>gulpfiles</code> I’ve looked into are similar to what I imagine a forensics team encounters at mass murder scenes.</li>\n<li>streams are awesome. when used for the right scenario.</li>\n</ul>\n"
}