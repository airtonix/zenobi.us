{"componentChunkName":"component---src-templates-postlist-tsx","path":"/posts/","result":{"data":{"mdx":{"id":"4bca6932-2c50-50b9-aa0c-74a67096c497","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"title\": \"Thoughts\",\n  \"template\": \"postlist\",\n  \"match\": \"posts/*\",\n  \"stage\": \"published\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"},"allMdx":{"nodes":[{"id":"01a3c90a-f5a4-5446-9195-d9f80a099b01","slug":"posts/2014-05-11-wintersmithplugin-externalmounter","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"template\": \"post\",\n  \"date\": \"2014-05-11T00:00:00.000Z\",\n  \"title\": \"Wintersmith Plugin. Mounter\",\n  \"stage\": \"published\",\n  \"tags\": \"nodejs, wintersmith, plugin\",\n  \"icon\": \"extension\",\n  \"comments\": true\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"So I've just created a plugin for wintersmith, aimed at utilising my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bower_components\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node_modules\"), \" directory from outside\\nmy contents directory. Really though, you could use any directory as an additional source of content for wintersmiths \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"content tree\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-sh\"\n  }), \"me@machine:~/Projects/this/one $ mythical-ls\\n\\tbower_components\\n\\tnode_modules\\n\\tsrc\\n\\t\\tassets\\n\\t\\t\\tscss\\n\\t\\tconfig\\n\\t\\tcontents\\n\\t\\t\\tarticles\\n\\t\\t\\tetc\\n\\t\\t\\t...\\n\\t\\t\\tindex.md\\n\\t\\tplugins\\n\\t\\ttemplates\\n\\t\\ttests\\n\\t\\tapp.coffee\\n\\tCNAME\\n\\tGruntfile.coffee\\n\\tbower.json\\n\\tpackage.json\\n\\treadme.md\")), mdx(\"p\", null, \"At first I was just putting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bower_components\"), \" directly inside my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"project/src/contents/assets/vendor/\"), \" and while this might be tenable for bower, it wasn't clean, you might come up with other reasons.\"), mdx(\"h4\", {\n    \"id\": \"installation\"\n  }, \"Installation\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"npm install wintersmith-mounter\")), mdx(\"h4\", {\n    \"id\": \"configuration\"\n  }, \"Configuration\"), mdx(\"p\", null, \"In your configuration file, describe the path you wish to mount external content at :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-yaml\"\n  }), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"...\"), \"\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"mounter:\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"mounts:\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'/assets/vendor/'\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \":\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"src:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'./bower_components'\"), \"\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"...\"))), mdx(\"p\", null, \"Now, any content inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./bower_components\"), \" will be available in your templates,\\njavascript or stylesheets under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/assets/vendor/\")), mdx(\"h4\", {\n    \"id\": \"contributing\"\n  }, \"Contributing\"), mdx(\"p\", null, \"Feel free to submit bug reports, pull requests over at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://github.com/airtonix/wintersmith-mounter\"\n  }), \"http://github.com/airtonix/wintersmith-mounter\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Wintersmith Plugin. Mounter","date":"2014-05-11T00:00:00.000Z","tags":"nodejs, wintersmith, plugin"}}]}},"pageContext":{"id":"4bca6932-2c50-50b9-aa0c-74a67096c497","title":"Thoughts","template":"postlist","match":"posts/*","stage":"published"}},"staticQueryHashes":[]}